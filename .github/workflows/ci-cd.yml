name: CI/CD

on:
  push:
    branches: [main, development]
  pull_request:
    branches: [main, development]
  release:
    types: [created]

jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      apps: ${{ steps.filter.outputs.changes }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            frontend:
              - "apps/frontend/**"
            accounts:
              - "apps/accounts/**"
            gateway:
              - "apps/gateway/**"
  changed-services:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      apps: ${{ steps.filter.outputs.changes }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            accounts:
              - "apps/accounts/**"
            gateway:
              - "apps/gateway/**"
  lint:
    runs-on: ubuntu-latest
    needs: changes
    strategy:
      matrix:
        app: ${{ fromJSON(needs.changes.outputs.apps) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: npm

      - name: Install Node.js dependencies
        run: npm ci -w apps/${{ matrix.app }}

      - name: Run linters ${{ matrix.app }}
        run: npm run lint -w apps/${{ matrix.app }} --if-present

  test-frontend:
    needs: changes
    if: ${{ needs.changes.outputs.frontend == 'true' }}
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.39.0-jammy
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: npm
      - name: Install Node.js dependencies
        run: npm ci -w apps/frontend
      - name: Run Playwright tests
        run: HOME=/root npm run test -w apps/frontend
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: apps/frontend/playwright-report/
          retention-days: 30

  test-services:
    runs-on: ubuntu-latest
    needs: changed-services
    strategy:
      matrix:
        app: ${{ fromJSON(needs.changed-services.outputs.apps) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: npm

      - name: Install Node.js dependencies
        run: npm ci -w apps/${{ matrix.app }}

      - name: Run Tests ${{ matrix.app }}
        run: npm run test -w apps/${{ matrix.app }} --if-present

  build-services:
    needs: [changed-services, lint, test-services]
    # if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    environment: Production
    strategy:
      matrix:
        app: ${{ fromJSON(needs.changed-services.outputs.apps) }}
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Build image on ACR
        uses: azure/CLI@v1
        with:
          azcliversion: 2.29.1
          inlineScript: |
            cd ./apps/${{ matrix.app }}
            az configure --defaults acr=${{ env.AZURE_CONTAINER_REGISTRY }}
            az acr build ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.AZURE_PROJECT_NAME }}-${{ matrix.app }}:latest

  deploy-services:
    needs: [changed-services, build-services]
    # if: github.event_name == 'release' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    environment: Production
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ${{ fromJSON(needs.changed-services.outputs.apps) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        id: login
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Gets K8s context
        id: context
        uses: azure/aks-set-context@3
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}
            resource-group: ${{ env.AZURE_RESOURCE_GROUP }}
            cluster-name: ${{ env.AZURE_CLUSTER_NAME }}

      - name: Deploys application
        uses: Azure/k8s-deploy@v4
        with:
          namespace: ${{ env.PROJECT_NAME }}
          manifests: |
            k8s/gateway-ingress.yml
            k8s/gateway-deployment.yml
            k8s/account-deployment.yml
          images: |
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.PROJECT_NAME }}-gateway:latest
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.PROJECT_NAME }}-accounts:latest
          imagepullsecrets: |
            ${{ env.PROJECT_NAME }}
